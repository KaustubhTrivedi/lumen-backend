// src/users/users.service.ts
import {
  Injectable,
  ConflictException,
  InternalServerErrorException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { User } from './entities/user.entity';
import { CreateUserDto } from './dto/create-user.dto'; // Generated by CLI
// import { UpdateUserDto } from './dto/update-user.dto'; // Generated by CLI
import * as bcrypt from 'bcryptjs';

@Injectable()
export class UsersService {
  constructor(
    @InjectRepository(User)
    private readonly userRepository: Repository<User>,
  ) {}

  /**
   * Creates a new user after hashing the password.
   * @param createUserDto - Contains email and plain text password.
   * @returns The newly created user entity (without password hash).
   * @throws ConflictException if email already exists.
   * @throws InternalServerErrorException on hashing/saving errors.
   */
  async create(
    createUserDto: CreateUserDto,
  ): Promise<Omit<User, 'passwordHash'>> {
    const { email, password } = createUserDto;

    // Check if user already exists
    const existingUser = await this.findOneByEmail(email);
    if (existingUser) {
      throw new ConflictException('Email already registered');
    }

    // Hash the password
    let hashedPassword: string;
    try {
      const saltRounds = 10; // Recommended salt rounds
      hashedPassword = await bcrypt.hash(password, saltRounds);
    } catch (error) {
      throw new InternalServerErrorException('Error hashing password');
    }

    // Create and save the new user
    const newUser = this.userRepository.create({
      email,
      passwordHash: hashedPassword,
    });

    try {
      const savedUser = await this.userRepository.save(newUser);
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      const { passwordHash, ...result } = savedUser; // Exclude passwordHash from returned object
      return result;
    } catch (error) {
      // Handle potential database errors (e.g., unique constraint violation if check failed)
      if (error.code === '23505') {
        // PostgreSQL unique violation code
        throw new ConflictException('Email already registered');
      }
      throw new InternalServerErrorException('Error saving user to database');
    }
  }

  /**
   * Finds a single user by their email address.
   * Includes the password hash for authentication purposes.
   * @param email - The email address to search for.
   * @returns The user entity including passwordHash, or null if not found.
   */
  async findOneByEmail(email: string): Promise<User | null> {
    return this.userRepository.findOne({
      where: { email },
      // Select passwordHash explicitly if it's excluded by default elsewhere
      // select: ['id', 'email', 'passwordHash', 'createdAt', 'updatedAt']
    });
  }

  /**
   * Finds a single user by their ID.
   * Typically excludes the password hash.
   * @param id - The UUID of the user.
   * @returns The user entity without passwordHash, or null if not found.
   */
  async findOneById(id: string): Promise<Omit<User, 'passwordHash'> | null> {
    const user = await this.userRepository.findOneBy({ id });
    if (!user) {
      return null;
    }
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    const { passwordHash, ...result } = user;
    return result;
  }

  // Add other methods like findAll, update, remove as needed later
}
