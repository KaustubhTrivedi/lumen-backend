    // src/task-dependencies/task-dependencies.controller.ts
    import { Controller, Get, Post, Body, Patch, Param, Delete, UseGuards, Logger, ParseUUIDPipe } from '@nestjs/common'; // Added Logger, ParseUUIDPipe, UseGuards
    import { TaskDependenciesService } from './task-dependencies.service';
    import { CreateTaskDependencyDto } from './dto/create-task-dependency.dto'; // Generated by CLI
    import { UpdateTaskDependencyDto } from './dto/update-task-dependency.dto'; // Generated by CLI
    import { JwtAuthGuard } from '../auth/guards/jwt-auth.guard'; // Import guard if protecting routes

    // Consider removing this controller entirely if no direct API access to dependencies is needed.
    // If kept, protect routes appropriately.
    @Controller('task-dependencies')
    // @UseGuards(JwtAuthGuard) // Uncomment to protect all routes in this controller
    export class TaskDependenciesController {
      private readonly logger = new Logger(TaskDependenciesController.name);

      constructor(private readonly taskDependenciesService: TaskDependenciesService) {}

      // Example endpoints generated by CLI - customize, protect, or remove as needed

      @Post()
      create(@Body() createTaskDependencyDto: CreateTaskDependencyDto) {
        this.logger.log('Received request to create task dependency (manual).');
        // Note: Manual creation might interfere with learned dependencies.
        return this.taskDependenciesService.create(createTaskDependencyDto);
      }

      @Get()
      findAll() {
        this.logger.log('Received request to find all task dependencies.');
        // TODO: Add filtering by user ID based on req.user from JWT
        return this.taskDependenciesService.findAll();
      }

      @Get(':id')
      findOne(@Param('id', ParseUUIDPipe) id: string) { // Use ParseUUIDPipe
        this.logger.log(`Received request to find task dependency with id: ${id}.`);
        // TODO: Add user ID check for ownership
        return this.taskDependenciesService.findOne(id);
      }

      @Patch(':id')
      update(@Param('id', ParseUUIDPipe) id: string, @Body() updateTaskDependencyDto: UpdateTaskDependencyDto) { // Use ParseUUIDPipe
        this.logger.log(`Received request to update task dependency with id: ${id}.`);
        // TODO: Add user ID check for ownership
        return this.taskDependenciesService.update(id, updateTaskDependencyDto);
      }

      @Delete(':id')
      remove(@Param('id', ParseUUIDPipe) id: string) { // Use ParseUUIDPipe
        this.logger.log(`Received request to remove task dependency with id: ${id}.`);
        // TODO: Add user ID check for ownership
        return this.taskDependenciesService.remove(id);
      }
    }
    